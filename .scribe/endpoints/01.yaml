name: Bookmarks
description: |-

  API endpoints for managing user Bookmarks
endpoints:
  -
    httpMethods:
      - POST
    uri: 'api/user/bookmarks/{bookmark_id}/restore'
    metadata:
      groupName: Bookmarks
      groupDescription: |-

        API endpoints for managing user Bookmarks
      subgroup: ''
      subgroupDescription: ''
      title: 'Restore bookmark'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      bookmark_id:
        name: bookmark_id
        description: 'The ID of the bookmark.'
        required: true
        example: facere
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      bookmark_id: facere
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "id": "uuid",
              "url": "url",
              "title": "Title",
              "description": null,
              "created_at": "date",
              "deleted": false
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3a5EcDae4k1V6d86vhZgPfb'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/user/bookmarks
    metadata:
      groupName: Bookmarks
      groupDescription: |-

        API endpoints for managing user Bookmarks
      subgroup: ''
      subgroupDescription: ''
      title: 'All bookmarks'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      q:
        name: q
        description: ''
        required: false
        example: velit
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      page:
        name: page
        description: ''
        required: false
        example: 15
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: ''
        required: false
        example: 16
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanQueryParameters:
      q: velit
      page: 15
      per_page: 16
    bodyParameters:
      q:
        name: q
        description: ''
        required: false
        example: rerum
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      per_page:
        name: per_page
        description: 'Must be at least 1.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      page:
        name: page
        description: 'Must be at least 1.'
        required: false
        example: 56
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
    cleanBodyParameters:
      q: rerum
      per_page: 1
      page: 56
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "data": [
                  {
                      "id": "uuid",
                      "url": "url",
                      "title": "Title",
                      "description": null,
                      "created_at": "date",
                      "deleted": false
                  }
              ],
              "meta": {
                  "current_page": 1,
                  "last_page": 1,
                  "per_page": 10,
                  "total": 2
              }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer eE63gvkPVZ1b5fD6dh4aca8'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/bookmarks
    metadata:
      groupName: Bookmarks
      groupDescription: |-

        API endpoints for managing user Bookmarks
      subgroup: ''
      subgroupDescription: ''
      title: 'Store bookmark'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      url:
        name: url
        description: ''
        required: true
        example: 'http://kertzmann.com/'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      url: 'http://kertzmann.com/'
    fileParameters: []
    responses:
      -
        status: 201
        content: |
          {
              "id": "uuid",
              "url": "url",
              "title": "Title",
              "description": null,
              "created_at": "date",
              "deleted": false
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3b6ag8k5VDdf4hc1Pv6aEZe'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/user/bookmarks/{id}'
    metadata:
      groupName: Bookmarks
      groupDescription: |-

        API endpoints for managing user Bookmarks
      subgroup: ''
      subgroupDescription: ''
      title: 'Destroy bookmark'
      description: 'soft delete or force delete if already trashed.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the bookmark.'
        required: true
        example: temporibus
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: temporibus
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 204
        content: '{}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Va4bZc8a6EP3khvDde1f6g5'
    controller: null
    method: null
    route: null
    custom: []
